model_c <- lm(data$preweight - data$weight6weeks ~ diet * gender, data = data)
summary(model_c)
# - If normality assumption is not met, Kruskal-wallis can be used
#data$weight6weeks = as.factor(data$weight6weeks)
model_b <- aov(preweight - weight6weeks ~ diet, data=data)
summary(model_b)
# - If normality assumption is not met, Kruskal-wallis can be used
#data$weight6weeks = as.factor(data$weight6weeks)
model_b <- aov(diet ~ preweight - weight6weeks, data=data)
summary(model_b)
# - If normality assumption is not met, Kruskal-wallis can be used
#data$weight6weeks = as.factor(data$weight6weeks)
model_b <- aov(preweight - weight6weeks ~ diet, data=data)
summary(model_b)
# c)
# Fit a two-way ANOVA model
#lostweights = as.factor(data$preweight - data$weight6weeks)
data$gender = as.factor(data$gender)
data$diet =  as.factor(data$diet)
model_c <- lm(data$preweight - data$weight6weeks ~ diet * gender, data = data)
summary(model_c)
model_c <- lm(preweight - weight6weeks ~ diet * gender, data = data)
summary(model_c)
# - If normality assumption is not met, Kruskal-wallis can be used
#data$weight6weeks = as.factor(data$weight6weeks)
model_b <- aov(preweight - weight6weeks ~ diet, data=data)
summary(model_b)
# c) Fit a two-way ANOVA model
data$gender = as.factor(data$gender)
data$diet =  as.factor(data$diet)
model_c <- lm(preweight - weight6weeks ~ diet * gender, data = data)
summary(model_c)
model_c <- lm(preweight - weight6weeks ~ diet * gender, data = data)
summary(model_c)
model_c <- anova(lm(preweight - weight6weeks ~ diet * gender, data = data))
summary(model_c)
model_c <- lm(preweight - weight6weeks ~ diet * gender, data = data)
summary(model_c)
interaction.plot(data$diet, data$gender)
anova(model_c)
anova(model_c)
summary(model_c)
model_c <- lm(preweight - weight6weeks ~ diet * gender, data = data)
anova(model_c)
aov
aov
# - If normality assumption is not met, Kruskal-wallis can be used
#data$weight6weeks = as.factor(data$weight6weeks)
model_b <- aov(preweight - weight6weeks ~ diet, data=data)
summary(model_b)
# - If normality assumption is not met, Kruskal-wallis can be used
#data$weight6weeks = as.factor(data$weight6weeks)
model_b <- lm(preweight - weight6weeks ~ diet, data=data)
summary(model_b)
anova(model_b)
# c) Fit a two-way ANOVA model
data$gender = as.factor(data$gender)
data$diet =  as.factor(data$diet)
model_c <- lm(preweight - weight6weeks ~ diet * gender, data = data)
anova(model_c)
lostw_diet_1 = mean(diet_1$preweight) - mean(diet_1$weight6weeks)
lostw_diet_2 = mean(diet_2$preweight) - mean(diet_2$weight6weeks)
lostw_diet_3 = mean(diet_3$preweight) - mean(diet_3$weight6weeks)
# Create a boxplot of weight6weeks by diet to compare the weight loss between the diets
boxplot((preweight-weight6weeks) ~ diet, data = data, xlab = "Diet", ylab = "Weight loss", main = "Boxplot of weightloss by Diet")
# c) Fit a two-way ANOVA model
data$gender = as.factor(data$gender)
data$diet =  as.factor(data$diet)
model_c <- lm(preweight - weight6weeks ~ diet * gender, data = data)
anova(model_c)
diet_1_predicted = mean(diet_1$preweight) + avg_loss_diet_1; diet_1_predicted
diet_2_predicted = mean(diet_2$preweight) + avg_loss_diet_2; diet_2_predicted
diet_2_predicted = mean(diet_3$preweight) + avg_loss_diet_3; diet_2_predicted
avg_loss_diet_1 = mean(diet_1$preweight) - mean(diet_1$weight6weeks)
avg_loss_diet_2 = mean(diet_2$preweight) - mean(diet_2$weight6weeks)
avg_loss_diet_3 = mean(diet_3$preweight) - mean(diet_3$weight6weeks)
diet_1_predicted = mean(diet_1$preweight) + avg_loss_diet_1; diet_1_predicted
diet_2_predicted = mean(diet_2$preweight) + avg_loss_diet_2; diet_2_predicted
diet_2_predicted = mean(diet_3$preweight) + avg_loss_diet_3; diet_2_predicted
diet_1_predicted = mean(diet_1$preweight) - avg_loss_diet_1; diet_1_predicted
diet_2_predicted = mean(diet_2$preweight) - avg_loss_diet_2; diet_2_predicted
diet_2_predicted = mean(diet_3$preweight) - avg_loss_diet_3; diet_2_predicted
# c) Fit a two-way ANOVA model
data$gender = as.factor(data$gender)
data$diet =  as.factor(data$diet)
model_c <- lm(preweight - weight6weeks ~ diet * gender, data = data)
anova(model_c)
```{r}
# Fit a two-way ANOVA model
data$gender = as.factor(data$gender)
model_c <- lm(preweight - weight6weeks ~ diet * gender, data = data)
anova(model_c)
# e) two-way anova is preferred
diet_1_predicted = mean(diet_1$preweight) - avg_loss_diet_1; diet_1_predicted
diet_2_predicted = mean(diet_2$preweight) - avg_loss_diet_2; diet_2_predicted
diet_3_predicted = mean(diet_3$preweight) - avg_loss_diet_3; diet_3_predicted
shapiro.test(data$weight6weeks)
shapiro.test(data$preweight)
shapiro.test(data$preweight)
```{r}
diet_1 = filter(data, diet==1)
diet_2 = filter(data, diet==2)
diet_3 = filter(data, diet==3)
avg_loss_diet_1 = mean(diet_1$preweight) - mean(diet_1$weight6weeks)
avg_loss_diet_3 = mean(diet_3$preweight) - mean(diet_3$weight6weeks)
diet_1_predicted = mean(diet_1$preweight) - avg_loss_diet_1; diet_1_predicted
diet_2_predicted = mean(diet_2$preweight) - avg_loss_diet_2; diet_2_predicted
diet_3_predicted = mean(diet_3$preweight) - avg_loss_diet_3; diet_3_predicted
knitr::opts_chunk$set(echo = TRUE)
options(digits=4)
df <- read.csv('Data/birthweight.txt')
shapiro.test(df$birthweight)[2]
qqnorm(df$birthweight)
options(digits=8)
n = nrow(df)
mu = mean(df$birthweight)
s = sd(df$birthweight)
z_98p = 2.05 # value from z score table for 98th percentile
m = z_98p*s/sqrt(n) # m = 1.96s/sqrt(n)
bounded_CI = c(mu - m, mu + m); bounded_CI #bounded 96% CI for mu
options(digits=6)
get_m = function(n) {
s = sd(df$birthweight)
z_98p = 2.05 # value from z score table for 98th percentile
m = z_98p*s/sqrt(n)
return(m)
}
for (sample_size in 1:1000) {
lower_bound = mu - get_m(sample_size)
upper_bound = mu + get_m(sample_size)
CI_length = upper_bound - lower_bound
if (CI_length <= 100) {
break
}
}
sample_size
# bootstrap 96%-CI:
B = 1000
Tstar = 1:B
for (i in 1:B){
Xstar = sample(df$birthweight, replace=TRUE)
Tstar[i] = mean(Xstar)
}
Tstar20 = quantile(Tstar, 0.020)
Tstar980 = quantile(Tstar, 0.980)
sum(Tstar<Tstar20)
options(digits=8)
bootstrap_CI = c(2*mu-Tstar980,2*mu-Tstar20)
bootstrap_CI
# H0 mean <= 2800
t.test(df$birthweight, mu=2800, alt="g")
options(digits=4)
# sign test
p_value = binom.test(sum(df$birthweight > 2800), length(df$birthweight), alt='g')[3]
sprintf(p_value, fmt = '%#.4f')
B = 1000
psign = numeric(B)
pttest = numeric(B)
n = 50
for(i in 1:B) {
x = sample(df$birthweight, n)
psign[i] = binom.test(sum(x>2800), n, alt='g')[[3]]
pttest[i] = t.test(x, mu=2800, alt='g')[[3]]
}
power_sign = sum(psign<0.05)/B
power_ttest = sum(pttest<0.05)/B
options(digits=6)
c(power_sign, power_ttest)
n = 100
p_lower = 0.25
sample_probabilities = numeric(n)
for(i in 1:n){
x = sample(df$birthweight, n)
sample_probabilities[i] = sum(x < 2600)/n
}
s = sd(sample_probabilities)
p_estimate = mean(sample_probabilities)
m = p_estimate - p_lower
p_upper = p_estimate + m
c(p_lower, p_estimate, p_upper)
p_val = numeric(100)
for(i in 1:100) {
males_u2600 = 34
females_u2600 = 28
males_a2600 = 61
females_a2600 = 65
under_2600 = df$birthweight[df$birthweight < 2600]
above_2600 = df$birthweight[df$birthweight > 2600]
under_2600
samples_males_u2600_i = sample(1:length(under_2600), males_u2600)
samples_males_u2600 = under_2600[samples_males_u2600_i]
samples_females_u2600 = under_2600[-samples_males_u2600_i]
samples_males_a2600_i = sample(1:length(above_2600), males_a2600)
samples_males_a2600 = above_2600[samples_males_a2600_i]
samples_females_a2600 = above_2600[-samples_males_a2600_i]
samples_males = c(samples_males_a2600, samples_males_u2600)
samples_females = c(samples_females_a2600, samples_females_u2600)
p_val[i] = t.test(samples_males, samples_females)[[3]]
}
options(digits=4)
mean(p_val)
df = read.csv('Data/cholesterol.txt', header = TRUE, sep = "")
par(mfrow=c(1,2))
hist(df$Before, main = 'Cholesterol before', xlab = 'mmol/L')
hist(df$After8weeks, main = 'Cholesterol after 8 weeks', xlab = 'mmol/L')
par(mfrow=c(1,2))
qqnorm(df$Before, col='red', pch=19, main="Normal Q-Q plot (before)")
qqline(df$Before, col='green')
qqnorm(df$After8weeks, col='red', pch=19, main="Normal Q-Q plot (after 8 weeks)")
qqline(df$After8weeks, col='green')
plot(df$Before, df$After8weeks, xlab = "Cholesterol before diet",
ylab = "cholesterol after 8 weeks diet",
main = paste("Scatter Plot (correlation = ", round(cor(df$Before,df$After8weeks), 3),
collapes=")", sep=""), col='red',pch = 19)
ttest = t.test(df$Before, df$After8weeks, alt='g', paired=TRUE)
print(paste("p-value of two-paired t-test: ",round(ttest$p.value,3)))
wilcox_test = wilcox.test(df$Before, df$After8weeks, alt='g',paired = TRUE)
print(paste("p-value of two-paired Wilcoxon signed rank test: ",round(wilcox_test$p.value,3)))
sample_maxs <- c()
n = 1000
for (i in 1:n){
sample_maxs[i] = max(sample(df$After8weeks, nrow(df), replace=TRUE))
}
estimated_upper_limit = mean(sample_maxs)
cat("Estimated Theta:", estimated_upper_limit, "\n")
cat("Confidence interval:", quantile(sample_maxs, probs=c(0.025,0.975 )))
theta = 3.00; t=max(df$After8weeks); counter = 1;B=1000;
tstar=numeric(B); p_values = c(); thetas = c();
while (theta <= 12) {
for (i in 1:B){
xstar = runif(n=nrow(df), min=3, max=theta)
tstar[i]=max(xstar)
}
p_left=sum(tstar<t)/B; p_right=sum(tstar>t)/B;
p_values[counter]= 2*min(p_left,p_right)
thetas[counter] = theta
counter = counter + 1
theta = theta + 0.01 #increment theta by  0.01
}
plot(x=thetas, y = p_values, type = "S", xlab = "Theta values", ylab="p-value", main = "Theta distribution according to p-values")
axis(1,at=seq(0,12,0.5),labels=NA)
abline(a=0.05,b=0, col='red')
df_theta = data.frame(thetas,p_values)
df_theta = dplyr::filter(df_theta, p_values > 0.05)
interval <- c(min(df_theta$theta), max(df_theta$theta))
print(interval)
binom.test(sum(df$After8weeks > 6), nrow(df), alt='g')
binom.test(sum(df$After8weeks > 4.5), nrow(df), alt='g', p=0.25)
library(dplyr)
library(multcomp)
data <- read.csv("Data/diet.txt",header = TRUE, sep = "")
# Test the assumptions
hist(data$preweight - data$weight6weeks, breaks=10)
# Test normality of the data
aovdata = lm(preweight~weight6weeks, data=data)
qqnorm(residuals(aovdata))
plot(fitted(aovdata),residuals(aovdata))
# Conduct a t-test to test the claim that diet affects weight loss
t.test(data$preweight, data$weight6weeks, paired=TRUE)
model_b <- aov(preweight - weight6weeks ~ diet, data=data)
summary(model_b)
# Which diet was the best for losing weight?
boxplot((preweight-weight6weeks) ~ diet, data = data, xlab = "Diet", ylab = "Weight loss", main = "Boxplot of weightloss by Diet")
# Fit a two-way ANOVA model
data$gender = as.factor(data$gender)
data$diet =  as.factor(data$diet)
model_c <- lm(preweight - weight6weeks ~ diet * gender, data = data)
anova(model_c)
diet_1 = filter(data, diet==1)
diet_2 = filter(data, diet==2)
diet_3 = filter(data, diet==3)
avg_loss_diet_1 = mean(diet_1$preweight) - mean(diet_1$weight6weeks)
avg_loss_diet_2 = mean(diet_2$preweight) - mean(diet_2$weight6weeks)
avg_loss_diet_3 = mean(diet_3$preweight) - mean(diet_3$weight6weeks)
diet_1_predicted = mean(diet_1$preweight) - avg_loss_diet_1; diet_1_predicted
diet_2_predicted = mean(diet_2$preweight) - avg_loss_diet_2; diet_2_predicted
diet_3_predicted = mean(diet_3$preweight) - avg_loss_diet_3; diet_3_predicted
I=6; J=3; N=2
rbind(rep(1:I,each=N*J),rep(1:J,N*I),sample(1:(N*I*J)))
#I think this is correct:
I=3; B=6; N=2
for (i in 1:B) print(sample(1:(N*I)))
#interpretation: rows correspond to blocks, columns correspond 2 repretitions of fertilizers (N,P,K,N,P,K), cells experimental units.
#For block 1 assign unit 3 to treatment 1, unit 1 to treatment 2, etc., for block
#2 assign unit 4 to treatment 1, unit 3 to treatment 2, etc.
df = MASS::npk
df_nitrogen = dplyr::filter(df, N == 1)
df_no_nitrogen =  dplyr::filter(df, N == 0)
par(mfrow=c(1,2))
boxplot(yield ~ block, data=df_nitrogen, main="yield with nitrogen"); boxplot(yield ~ block, data=df_no_nitrogen, main='yield without nitrogen')
df$block = as.factor(df$block)
df$N = as.factor(df$N)
anovaN = lm(yield ~ block * N,data=df);anova(anovaN)
par(mfrow=c(1,2))
qqnorm(residuals(anovaN));qqline(residuals(anovaN),col='red') ;plot(fitted(anovaN),residuals(anovaN))
additive_model = lm(yield ~ block + N,data=df);anova(additive_model)
par(mfrow=c(1,2))
interaction.plot(df$block,df$N,df$yield, trace.label='Nitrogen',xlab='block',ylab='yield')
interaction.plot(df$N, df$block, df$yield, trace.label='Block', xlab='nitrogen', ylab='yield')
---
title: "exercise4"
```{r setup, include=FALSE}
library(MASS)
options(digits=3)
library(MASS)
options(digits=3)
The dataset npk is available in the R package MASS. After loading the package MASS, type npk at the prompt to view this dataset. This dataset gives the yield of peas in pounds per plot, based on four factors: in which block the plot was located (labeled 1 through 6), and whether nitrogen (N), phosphate (P) or potassium (K) was applied to the soil (1 = applied, 0 = not applied). There are 24 plots, 4 per block. This is incomplete block design but balanced in the sense that within each block each soil additive is received by two plots. Our main question of interest is whether nitrogen N has an effect on yield.
a)  Present an R-code for the randomization process to distribute soil additives over plots in such a way that each soil additive is received exactly by two plots within each block.
I - plot location in one of the six blocks, J - factor variable for additives
```{r cars}
rbind(rep(1:I,each=N*J),rep(1:J,N*I),sample(1:(N*I*J)))
rbind(rep(1:I,each=N*J),rep(1:J,N*I),sample(1:(N*I*J)))
#I think this is correct:
I=3; B=6; N=2
```
First, we check
library(MASS)
options(digits=3)
I=6; J=3; N=2
rbind(rep(1:I,each=N*J),rep(1:J,N*I),sample(1:(N*I*J)))
#I think this is correct:
I=3; B=6; N=2
for (i in 1:B) print(sample(1:(N*I)))
#interpretation: rows correspond to blocks, columns correspond 2 repretitions of fertilizers (N,P,K,N,P,K), cells experimental units.
#For block 1 assign unit 3 to treatment 1, unit 1 to treatment 2, etc., for block
#2 assign unit 4 to treatment 1, unit 3 to treatment 2, etc.
df = MASS::npk
df_nitrogen = dplyr::filter(df, N == 1)
df_no_nitrogen =  dplyr::filter(df, N == 0)
par(mfrow=c(1,2))
boxplot(yield ~ block, data=df_nitrogen, main="yield with nitrogen"); boxplot(yield ~ block, data=df_no_nitrogen, main='yield without nitrogen')
df$block = as.factor(df$block)
df$N = as.factor(df$N)
anovaN = lm(yield ~ block * N,data=df);anova(anovaN)
par(mfrow=c(1,2))
qqnorm(residuals(anovaN));qqline(residuals(anovaN),col='red',p) ;plot(fitted(anovaN),residuals(anovaN))
df$K = as.factor(df$K)
df$P = as.factor(df$P)
model_a = lm(yield ~ N + P + block*K, data=df); anova(model_a)
model_b = lm(yield ~ N + K + block*P, data=df); anova(model_b)
model_c = lm(yield ~ N + K + P + block, data=df); anova(model_c)
df$K = as.factor(df$K)
df$P = as.factor(df$P)
model_a = lm(yield ~ N + P + block*K, data=df); anova(model_a)
model_b = lm(yield ~ N + K + block*P, data=df); anova(model_b)
model_c = lm(yield ~ N + K + block*P, data=df); anova(model_c)
model_d = lm(yield ~ N + K + P + block, data=df); anova(model_d)
df$K = as.factor(df$K)
df$P = as.factor(df$P)
model_a = lm(yield ~ N + P + block*K, data=df); anova(model_a)
model_b = lm(yield ~ N + K + block*P, data=df); anova(model_b)
model_c = lm(yield ~ N + K + block*P, data=df); anova(model_c)
model_d = lm(yield ~ N + K + P + block, data=df); anova(model_d)
model_e = lm(yield ~ N + K*P + block, data=df); anova(model_e)
model_f = lm(yield ~ P + K*N + block, data=df); anova(model_f)
model_g = lm(yield ~ P*K + N + block, data=df); anova(model_g)
model_g = lm(yield ~ P*N + K + block, data=df); anova(model_g)
df$K = as.factor(df$K)
df$P = as.factor(df$P)
model_a = lm(yield ~ N + P + block*K, data=df); anova(model_a)
model_b = lm(yield ~ N + K + block*P, data=df); anova(model_b)
model_c = lm(yield ~ N + K + block*P, data=df); anova(model_c)
model_d = lm(yield ~ N + K + P + block, data=df); anova(model_d)
df$K = as.factor(df$K)
df$P = as.factor(df$P)
model_a = lm(yield ~ N + P + block*K, data=df); anova(model_a)
model_b = lm(yield ~ N + K + block*P, data=df); anova(model_b)
model_c = lm(yield ~ P + K + block*N, data=df); anova(model_c)
model_d = lm(yield ~ N + K + P + block, data=df); anova(model_d)
