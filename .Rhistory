qqline(df$After8weeks, col='green')
#paired t-test:
t.test(df$Before, df$After8weeks, paired=TRUE)
#paired t-test:
summary(t.test(df$Before, df$After8weeks, paired=TRUE))
#paired t-test:
t.test(df$Before, df$After8weeks, paired=TRUE)
#Wilcox signed rank test (we can use it since both samples are symmetric more or less)
sum(rank(abs(df$Before-df$After8weeks))[df$Before-df$After8weeks > 0])#value test statistics
#paired t-test:
t.test(df$Before, df$After8weeks, paired=TRUE)
#paired t-test:
t.test(df$Before, df$After8weeks, paired=TRUE, alt='l')
#paired t-test:
t.test(df$Before, df$After8weeks, paired=TRUE, alt='g')
#paired t-test:
t.test(df$Before, df$After8weeks, paired=TRUE)
#equivalent one sample t-test:
t.test(df$Before - df$After8weeks)
t.test(df$After8weeks - df$Before)
mean(df$Before)
mean(df$After8weeks)
mean(df$Before) - mean(df$After8weeks)
#paired t-test:
t_test_results = t.test(df$Before, df$After8weeks, paired=TRUE)
t_test_results
t_test_results$statistic
t_test_results$p.value
round(t_test_results$p.value, 3)
#paired t-test:
t_test_results = t.test(df$Before, df$After8weeks, paired=TRUE)
print(t_test_results$p.value)
print("p-value:", t_test_results$p.value)
print(paste("p-value: ", t_test_results$p.value))
print(paste("p-value: ", round(t_test_results$p.value, 3))
print(paste("p-value: ", round(t_test_results$p.value, 3)))
print(paste("p-value: ", round(t_test_results$p.value, 3)))
wilcox.test(df$Before, df$After8weeks, paired = TRUE)
print(t_test_results)
#b)  Apply two relevant tests (cf. Lectures 2, 3) to verify whether the diet with low fat margarine has an effect
#   (argue whether the data are paired or not). Is a permutation test applicable?
########################################################################################
#paired t-test:
t_test_results = t.test(df$Before, df$After8weeks, paired=TRUE)
print(t_test_results)
#equivalent one sample t-test:
#t.test(df$Before - df$After8weeks)
#Wilcox signed rank test (we can use it since both samples are symmetric more or less)
#sum(rank(abs(df$Before-df$After8weeks))[df$Before-df$After8weeks > 0])#value test statistics
wilcox.test(df$Before, df$After8weeks, paired = TRUE)
t.test(df$Before, df$After8weeks)
t.test(df$Before, df$After8weeks, alt='g')
#paired t-test:
t.test(df$Before, df$After8weeks, paired=TRUE)
t.test(df$Before, df$After8weeks, alt='g', paired=TRUE)
#paired t-test:
t.test(df$Before, df$After8weeks, paired=TRUE)
t.test(df$Before, df$After8weeks, alt='g', paired=TRUE)
2e-11
a
2e-11
round(2e-11)
round(2e-11, 3)
#equivalent one sample t-test:
#t.test(df$Before - df$After8weeks)
#Wilcox signed rank test (we can use it since both samples are symmetric more or less)
#sum(rank(abs(df$Before-df$After8weeks))[df$Before-df$After8weeks > 0])#value test statistics
wilcox.test(df$Before, df$After8weeks, alt='g',paired = TRUE)
#b)  Apply two relevant tests (cf. Lectures 2, 3) to verify whether the diet with low fat margarine has an effect
#   (argue whether the data are paired or not). Is a permutation test applicable?
########################################################################################
#paired t-test:
t.test(df$Before, df$After8weeks, alt='g', paired=TRUE)$
#Wilcoxon signed rank test:
wilcox.test(df$Before, df$After8weeks, alt='g',paired = TRUE)
#b)  Apply two relevant tests (cf. Lectures 2, 3) to verify whether the diet with low fat margarine has an effect
#   (argue whether the data are paired or not). Is a permutation test applicable?
########################################################################################
#paired t-test:
t.test(df$Before, df$After8weeks, alt='g', paired=TRUE)
#Wilcoxon signed rank test:
wilcox.test(df$Before, df$After8weeks, alt='g',paired = TRUE)
round(4e-06, 3)
ttest = t.test(df$Before, df$After8weeks, alt='g', paired=TRUE); print(ttest$)
ttest = t.test(df$Before, df$After8weeks, alt='g', paired=TRUE);# print(ttest$)
ttest = t.test(df$Before, df$After8weeks, alt='g', paired=TRUE);
print(paste("p-value of two-paired t-test: ",round(ttest$p.value,3)))
wilcox.test(df$Before, df$After8weeks, alt='g',paired = TRUE)
ttest = t.test(df$Before, df$After8weeks, alt='g', paired=TRUE)
print(paste("p-value of two-paired t-test: ",round(ttest$p.value,3)))
wilcox_test = wilcox.test(df$Before, df$After8weeks, alt='g',paired = TRUE)
print(paste("p-value of two-paired Wilcoxon signed rank test: ",round(wilcox_test$p.value,3)))
cor.test(df$Before,df$After8weeks)
sample_maxs <- c()
#take 1,000 random samples of size n=nrow(df)
n = 1000
for (i in 1:n){
sample_maxs[i] = max(sample(df$After8weeks, nrow(df), replace=TRUE))
}
#first way to estimate CI:
estimated_upper_limit = mean(sample_maxs)
s = sd(sample_maxs)
z_95p = 1.96 # value from z score table for 97.5th percentile
m = z_95p*s/sqrt(nrow(df)) #m = 1.96s/âˆšn
bounded_CI = c(estimated_upper_limit - m, estimated_upper_limit + m) #bounded 96% CI for mu
bounded_CI
#second way to estimate CI (i am more confident in this)
cat("ci", quantile(sample_maxs, c(0.025,0.975 )))
#second way to estimate CI (i am more confident in this)
cat("CI:", quantile(sample_maxs, c(0.025,0.975 )))
#create empty vector to hold sample means
sample_maxs <- c()
#take 1,000 random samples of size n=nrow(df)
n = 1000
for (i in 1:n){
sample_maxs[i] = max(sample(df$After8weeks, nrow(df), replace=TRUE))
}
cat("CI:", quantile(sample_maxs, c(0.025,0.975 )))
cat("CI:", quantile(sample_maxs, probs=c(0.025,0.975 )))
sample_maxs <- c()
n = 1000
for (i in 1:n){
sample_maxs[i] = max(sample(df$After8weeks, nrow(df), replace=TRUE))
}
cat("CI:", quantile(sample_maxs, probs=c(0.025,0.975 )))
hist(sample_maxs)
estimated_upper_limit = mean(sample_maxs)
estimated_upper_limit
hist(mean(sample(df$After8weeks, nrow(df), replace=TRUE)))
sample_maxs <- c()
n = 1000
for (i in 1:n){
sample_maxs[i] = max(sample(df$After8weeks, nrow(df), replace=TRUE))
}
estimated_upper_limit = mean(sample_maxs)
cat("estimated theta:", estimated_upper_limit)
cat("CI:", quantile(sample_maxs, probs=c(0.025,0.975 )))
sample_maxs <- c()
n = 1000
for (i in 1:n){
sample_maxs[i] = max(sample(df$After8weeks, nrow(df), replace=TRUE))
}
estimated_upper_limit = mean(sample_maxs)
cat("estimated theta:", estimated_upper_limit)
cat("CI:", quantile(sample_maxs, probs=c(0.025,0.975 )))
sample_maxs <- c()
n = 1000
for (i in 1:n){
sample_maxs[i] = max(sample(df$After8weeks, nrow(df), replace=TRUE))
}
estimated_upper_limit = mean(sample_maxs)
cat("estimated theta:", estimated_upper_limit); print("\n")
cat("CI:", quantile(sample_maxs, probs=c(0.025,0.975 )))
sample_maxs <- c()
n = 1000
for (i in 1:n){
sample_maxs[i] = max(sample(df$After8weeks, nrow(df), replace=TRUE))
}
estimated_upper_limit = mean(sample_maxs)
cat("estimated theta:", estimated_upper_limit); print("/n")
cat("CI:", quantile(sample_maxs, probs=c(0.025,0.975 )))
sample_maxs <- c()
n = 1000
for (i in 1:n){
sample_maxs[i] = max(sample(df$After8weeks, nrow(df), replace=TRUE))
}
estimated_upper_limit = mean(sample_maxs)
cat("estimated theta:", estimated_upper_limit, "/n")
cat("CI:", quantile(sample_maxs, probs=c(0.025,0.975 )))
sample_maxs <- c()
n = 1000
for (i in 1:n){
sample_maxs[i] = max(sample(df$After8weeks, nrow(df), replace=TRUE))
}
estimated_upper_limit = mean(sample_maxs)
cat("estimated theta:", estimated_upper_limit, "\n")
cat("CI:", quantile(sample_maxs, probs=c(0.025,0.975 )))
sample_maxs <- c()
n = 1000
for (i in 1:n){
sample_maxs[i] = max(sample(df$After8weeks, nrow(df), replace=TRUE))
}
estimated_upper_limit = mean(sample_maxs)
cat("Estimated Theta:", estimated_upper_limit, "\n")
cat("Confidence interval:", quantile(sample_maxs, probs=c(0.025,0.975 )))
sample_maxs <- c()
n = 1000
for (i in 1:n){
sample_maxs[i] = mean(sample(df$After8weeks, nrow(df), replace=TRUE))
}
estimated_upper_limit = max(sample_maxs)
cat("Estimated Theta:", estimated_upper_limit, "\n")
cat("Confidence interval:", quantile(sample_maxs, probs=c(0.025,0.975 )))
sample_maxs <- c()
n = 1000
for (i in 1:n){
sample_maxs[i] = max(sample(df$After8weeks, nrow(df), replace=TRUE))
}
estimated_upper_limit = mean(sample_maxs)
cat("Estimated Theta:", estimated_upper_limit, "\n")
cat("Confidence interval:", quantile(sample_maxs, probs=c(0.025,0.975 )))
sample_maxs <- c()
n = 1000
for (i in 1:n){
sample_maxs[i] = max(sample(df$After8weeks, nrow(df), replace=TRUE))
}
estimated_upper_limit = mean(sample_maxs)
cat("Estimated Theta:", estimated_upper_limit, "\n")
cat("Confidence interval:", quantile(sample_maxs, probs=c(0.025,0.975 )))
sample_maxs <- c()
n = 1000
for (i in 1:n){
sample_maxs[i] = max(sample(df$After8weeks, nrow(df), replace=TRUE))
}
estimated_upper_limit = mean(sample_maxs)
cat("Estimated Theta:", round(estimated_upper_limit,3), "\n")
cat("Confidence interval:", quantile(sample_maxs, probs=c(0.025,0.975 )))
theta = 3.00; t=max(df$After8weeks); counter = 1;B=1000;
tstar=numeric(B); p_values = c(); thetas = c();
while (theta <= 12) {
for (i in 1:B){
xstar = runif(n=nrow(df), min=3, max=theta)
tstar[i]=max(xstar)
}
p_left=sum(tstar<t)/B; p_right=sum(tstar>t)/B;
p_values[counter]= 2*min(p_left,p_right)
thetas[counter] = theta
counter = counter + 1
theta = theta + 0.01 #increment theta by  0.01
}
plot(x=thetas, y = p_values, type = "S")
abline(a=0.05,b=0, col='red')
plot(x=thetas, y = p_values, type = "S", xlab = "$\theta$ values")
abline(a=0.05,b=0, col='red')
theta = 3.00; t=max(df$After8weeks); counter = 1;B=1000;
tstar=numeric(B); p_values = c(); thetas = c();
while (theta <= 12) {
for (i in 1:B){
xstar = runif(n=nrow(df), min=3, max=theta)
tstar[i]=max(xstar)
}
p_left=sum(tstar<t)/B; p_right=sum(tstar>t)/B;
p_values[counter]= 2*min(p_left,p_right)
thetas[counter] = theta
counter = counter + 1
theta = theta + 0.01 #increment theta by  0.01
}
plot(x=thetas, y = p_values, type = "S", xlab = "Theta values", ylab="p-value", main = "Theta distribution according to p-values")
abline(a=0.05,b=0, col='red')
theta = 3.00; t=max(df$After8weeks); counter = 1;B=1000;
tstar=numeric(B); p_values = c(); thetas = c();
while (theta <= 12) {
for (i in 1:B){
xstar = runif(n=nrow(df), min=3, max=theta)
tstar[i]=max(xstar)
}
p_left=sum(tstar<t)/B; p_right=sum(tstar>t)/B;
p_values[counter]= 2*min(p_left,p_right)
thetas[counter] = theta
counter = counter + 1
theta = theta + 0.01 #increment theta by  0.01
}
plot(x=thetas, y = p_values, type = "S", xlab = "Theta values", ylab="p-value", main = "Theta distribution according to p-values")
abline(a=0.05,b=0, col='red')
p_values
plot(x=thetas, y = p_values, type = "S", xlab = "Theta values", ylab="p-value", main = "Theta distribution according to p-values")
axis(1,at=seq(0,12,0.5),labels=NA)
abline(a=0.05,b=0, col='red')
theta = 3.00; t=max(df$After8weeks); counter = 1;B=1000;
tstar=numeric(B); p_values = c(); thetas = c();
while (theta <= 12) {
for (i in 1:B){
xstar = runif(n=nrow(df), min=3, max=theta)
tstar[i]=max(xstar)
}
p_left=sum(tstar<t)/B; p_right=sum(tstar>t)/B;
p_values[counter]= 2*min(p_left,p_right)
thetas[counter] = theta
counter = counter + 1
theta = theta + 0.01 #increment theta by  0.01
}
plot(x=thetas, y = p_values, type = "S", xlab = "Theta values", ylab="p-value", main = "Theta distribution according to p-values")
axis(1,at=seq(0,12,0.5),labels=NA)
abline(a=0.05,b=0, col='red')
plot(x=thetas, y = p_values, type = "S", xlab = "Theta values", ylab="p-value", main = "Theta distribution according to p-values")
axis(1,at=seq(0,12,0.5),labels=TRUE)
abline(a=0.05,b=0, col='red')
plot(x=thetas, y = p_values, type = "S", xlab = "Theta values", ylab="p-value", main = "Theta distribution according to p-values")
axis(1,at=seq(0,12,0.5))
abline(a=0.05,b=0, col='red')
plot(x=thetas, y = p_values, type = "S", xlab = "Theta values", ylab="p-value", main = "Theta distribution according to p-values")
axis(1,at=seq(0,12,0.5))
abline(a=0.05,b=0, col='red')
plot(x=thetas, y = p_values, type = "S", xlab = "Theta values", ylab="p-value", main = "Theta distribution according to p-values")
axis(1,at=seq(0,12,0.5),labels=NA)
abline(a=0.05,b=0, col='red')
data.frame(theta,p_values)
data.frame(thetas,p_values)
view(data.frame(thetas, p_values))
View(data.frame(thetas, p_values))
df_d = data.frame(thetas,p_values)
df_d = dplyr::filter(df, p_values > 0.05)
View(t_test_results)
View(df_d)
df_d = data.frame(thetas,p_values)
dplyr::filter(df_d, p_values > 0.05)
theta = 3.00; t=max(df$After8weeks); counter = 1;B=1000;
tstar=numeric(B); p_values = c(); thetas = c();
while (theta <= 12) {
for (i in 1:B){
xstar = runif(n=nrow(df), min=3, max=theta)
tstar[i]=max(xstar)
}
p_left=sum(tstar<t)/B; p_right=sum(tstar>t)/B;
p_values[counter]= 2*min(p_left,p_right)
thetas[counter] = theta
counter = counter + 1
theta = theta + 0.01 #increment theta by  0.01
}
plot(x=thetas, y = p_values, type = "S", xlab = "Theta values", ylab="p-value", main = "Theta distribution according to p-values")
axis(1,at=seq(0,12,0.5),labels=NA)
abline(a=0.05,b=0, col='red')
df_theta = data.frame(thetas,p_values)
df_theta = dplyr::filter(df_d, p_values > 0.05)
Interval <- c(min(df_theta$theta), max(df_theta$theta))
print(interval)
theta = 3.00; t=max(df$After8weeks); counter = 1;B=1000;
tstar=numeric(B); p_values = c(); thetas = c();
while (theta <= 12) {
for (i in 1:B){
xstar = runif(n=nrow(df), min=3, max=theta)
tstar[i]=max(xstar)
}
p_left=sum(tstar<t)/B; p_right=sum(tstar>t)/B;
p_values[counter]= 2*min(p_left,p_right)
thetas[counter] = theta
counter = counter + 1
theta = theta + 0.01 #increment theta by  0.01
}
plot(x=thetas, y = p_values, type = "S", xlab = "Theta values", ylab="p-value", main = "Theta distribution according to p-values")
axis(1,at=seq(0,12,0.5),labels=NA)
abline(a=0.05,b=0, col='red')
df_theta = data.frame(thetas,p_values)
df_theta = dplyr::filter(df_d, p_values > 0.05)
interval <- c(min(df_theta$theta), max(df_theta$theta))
print(interval)
binom.test(sum(df$After8weeks < 6), nrow(df), alt='l')
binom.test(sum(df$After8weeks < 4.5), nrow(df), alt='l', p=0.25)
binom.test(sum(df$After8weeks < 6), nrow(df), alt='l', p=0.5)
binom.test(sum(df$After8weeks < 6), nrow(df), alt='l', p=0.5)
binom.test(sum(df$After8weeks < 6), nrow(df), alt='l')
binom.test(sum(df$After8weeks < 6), nrow(df), alt='l', p=0.5)
binom.test(sum(df$After8weeks < 6), nrow(df), alt='l')
#binom.test(sum(df$After8weeks < 4.5), nrow(df), alt='l', p=0.25)
binom.test(sum(df$After8weeks < 6), nrow(df), alt='g')
binom.test(sum(df$After8weeks > 6), nrow(df), alt='g')
binom.test(sum(df$After8weeks > 6), nrow(df), alt='g')
binom.test(sum(df$After8weeks < 6), nrow(df), alt='l')
#binom.test(sum(df$After8weeks < 4.5), nrow(df), alt='l', p=0.25)
binom.test(sum(df$After8weeks > 6), nrow(df), alt='g')
binom.test(sum(df$After8weeks > 4.5), nrow(df), alt='l', p=0.25)
binom.test(sum(df$After8weeks > 4.5), nrow(df), alt='g', p=0.25)
round(3e-07,3)
3e-07
as.numeric(3e-07)
theta = 3.00; t=max(df$After8weeks); counter = 1;B=1000;
tstar=numeric(B); p_values = c(); thetas = c();
while (theta <= 12) {
for (i in 1:B){
xstar = runif(n=nrow(df), min=3, max=theta)
tstar[i]=max(xstar)
}
p_left=sum(tstar<t)/B; p_right=sum(tstar>t)/B;
p_values[counter]= 2*min(p_left,p_right)
thetas[counter] = theta
counter = counter + 1
theta = theta + 0.01 #increment theta by  0.01
}
plot(x=thetas, y = p_values, type = "S", xlab = "Theta values", ylab="p-value", main = "Theta distribution according to p-values")
axis(1,at=seq(0,12,0.5),labels=NA)
abline(a=0.05,b=0, col='red')
df_theta = data.frame(thetas,p_values)
df_theta = dplyr::filter(df_theta, p_values > 0.05)
interval <- c(min(df_theta$theta), max(df_theta$theta))
print(interval)
library(MASS)
```{r setup, include=FALSE}
library(MASS)
npk
df = npk
View(df)
pairs(df)
library(MASS)
I=6; J=3; N=2
rbind(rep(1:I,each=N*J),rep(1:J,N*I),sample(1:(N*I*J)))
df_nitrogen = dplyr::filter(df, N == 1)
df_no_nitrogen =  dplyr::filter(df, N == 0)
par(mfrow=c(1,2))
boxplot(yield ~ block, data=df_nitrogen, main="yield with nitrogen"); boxplot(yield ~ block, data=df_no_nitrogen, main='yield without nitrogen')
df$block = as.factor(df$block)
df$N = as.factor(df$N)
anovaN = lm(yield ~ block + N,data=df);anova(anovaN)
df$block = as.factor(df$block)
df$N = as.factor(df$N)
anovaN = lm(yield ~ block * N,data=df);anova(anovaN)
anovaN = lm(yield ~ block + N,data=df);anova(anovaN)
df$block = as.factor(df$block)
df$N = as.factor(df$N)
anovaN = lm(yield ~ block * N,data=df);anova(anovaN)
df = MASS::npk
I=6; J=3; N=2
rbind(rep(1:I,each=N*J),rep(1:J,N*I),sample(1:(N*I*J)))
df = MASS::npk
df_nitrogen = dplyr::filter(df, N == 1)
df_no_nitrogen =  dplyr::filter(df, N == 0)
par(mfrow=c(1,2))
boxplot(yield ~ block, data=df_nitrogen, main="yield with nitrogen"); boxplot(yield ~ block, data=df_no_nitrogen, main='yield without nitrogen')
anovaN = lm(yield ~ block + N,data=df);anova(anovaN)
df$block = as.factor(df$block)
df$N = as.factor(df$N)
anovaN = lm(yield ~ block * N,data=df);anova(anovaN)
attach(df)
interaction.plot(block,N,yield)
attach(df)
interaction.plot(block,N,yield)
interaction.plot(block,N,yield,data=df)
interaction.plot(N, block, yield)
N
interaction.plot(df$block,df$N,df$yield)
interaction.plot(df$N, df$block, df$yield)
par(mfrow=c(1,2))
interaction.plot(df$block,df$N,df$yield)
interaction.plot(df$N, df$block, df$yield)
par(mfrow=c(1,2))
interaction.plot(df$block,df$N,df$yield)
interaction.plot(df$N, df$block, df$yield)
par(mfrow=c(1,2))
interaction.plot(df$block,df$N,df$yield, trace.label='Nitrogen')
interaction.plot(df$N, df$block, df$yield)
par(mfrow=c(1,2))
interaction.plot(df$block,df$N,df$yield, trace.label='Nitrogen',xlab='block',ylab='yield')
interaction.plot(df$N, df$block, df$yield, trace.label='Block', xlab='nitrogen', ylab='yield')
library(MASS)
options(digits=3)
anovaN = lm(yield ~ block + N,data=df);anova(anovaN)
df$block = as.factor(df$block)
df$N = as.factor(df$N)
anovaN = lm(yield ~ block * N,data=df);anova(anovaN)
View(df)
summary(anovaN)
df$block = as.factor(df$block)
df$N = as.factor(df$N)
anovaN = lm(yield ~ block * N,data=df);anova(anovaN)
anovaN = lm(yield ~ block + N,data=df);anova(anovaN)
df$block = as.factor(df$block)
df$N = as.factor(df$N)
anovaN = lm(yield ~ block * N,data=df);anova(anovaN)
qqnorm(residuals(anovaN)); plot(fitted(anovaN),residuals(anovaN))
df$block = as.factor(df$block)
df$N = as.factor(df$N)
anovaN = lm(yield ~ block * N,data=df);anova(anovaN)
qqnorm(residuals(anovaN));qqline() ;plot(fitted(anovaN),residuals(anovaN))
df$block = as.factor(df$block)
df$N = as.factor(df$N)
anovaN = lm(yield ~ block * N,data=df);anova(anovaN)
qqnorm(residuals(anovaN));qqline(residuals(anovaN)) ;plot(fitted(anovaN),residuals(anovaN))
df$block = as.factor(df$block)
df$N = as.factor(df$N)
anovaN = lm(yield ~ block * N,data=df);anova(anovaN)
par(mfrow=c(1,2))
qqnorm(residuals(anovaN));qqline(residuals(anovaN)) ;plot(fitted(anovaN),residuals(anovaN))
I=6; J=3; N=2
rbind(rep(1:I,each=N*J),rep(1:J,N*I),sample(1:(N*I*J)))
I=3; B=6; N=2
for (i in 1:B) print(sample(1:(N*I)))
for (i in 1:B) print(sample(1:(N*I)))
I=3; B=6; N=2
for (i in 1:B) print(sample(1:(N*I)))
I=3; B=6; N=1
for (i in 1:B) print(sample(1:(N*I)))
I=3; B=6; N=2
for (i in 1:B) print(sample(1:(N*I)))
df$block = as.factor(df$block)
df$N = as.factor(df$N)
anovaN = lm(yield ~ block * N,data=df);anova(anovaN)
par(mfrow=c(1,2))
qqnorm(residuals(anovaN));qqline(residuals(anovaN),col='red') ;plot(fitted(anovaN),residuals(anovaN))
df$block = as.factor(df$block)
df$N = as.factor(df$N)
anovaN = lm(yield ~ block * N,data=df);anova(anovaN)
par(mfrow=c(1,2))
qqnorm(residuals(anovaN));qqline(residuals(anovaN),col='red',pcw=19) ;plot(fitted(anovaN),residuals(anovaN))
par(mfrow=c(1,2))
interaction.plot(df$block,df$N,df$yield, trace.label='Nitrogen',xlab='block',ylab='yield')
interaction.plot(df$N, df$block, df$yield, trace.label='Block', xlab='nitrogen', ylab='yield')
rep(c('N','P','K'),2)
I=6; J=3; N=2
rbind(rep(1:I,each=N*J),rep(1:J,N*I),sample(1:(N*I*J)))
#I think this is correct:
I=3; B=6; N=2
for (i in 1:B) print(sample(1:(N*I)))
#interpretation: rows correspond to blocks, columns correspond 2 repretitions of fertilizers (N,P,K,N,P,K), cells experimental units.
#For block 1 assign unit 3 to treatment 1, unit 1 to treatment 2, etc., for block
#2 assign unit 4 to treatment 1, unit 3 to treatment 2, etc.
I=6; J=3; N=2
rbind(rep(1:I,each=N*J),rep(1:J,N*I),sample(1:(N*I*J)))
#I think this is correct:
I=3; B=6; N=2
for (i in 1:B) print(sample(1:(N*I)))
#interpretation: rows correspond to blocks, columns correspond 2 repretitions of fertilizers (N,P,K,N,P,K), cells experimental units.
#For block 1 assign unit 3 to treatment 1, unit 1 to treatment 2, etc., for block
#2 assign unit 4 to treatment 1, unit 3 to treatment 2, etc.
